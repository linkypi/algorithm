package com.lynch.fibo_extern;

/**
 * 字符串只能由 0 与 1 组成, 给定一个字符串长度 n , 则所有可能的字符串有 2 的次方种,
 * 若某个字符串中, 只要是出现 0 的位置其左边必须为 1, 这样的字符串成为达标字符串
 * 给定一个正数 N , 返回所有长度为 N 的字符串中达标字符串的数量.
 *
 * 问题分析:
 * 前提条件是 0 的左边必须为 1, 则组成的字符串中第一位必须为 1, 而第二位就可能是 1,可能是 0.
 * 使用 i 表示除去第一位以外的剩余字符串长度
 * 将 F(i)记作所有长度为 N (i=N-1, 第一位固定是 1) 的字符串中达标字符串的数量.
 * 1. 若第二位是 1 则可能性就由后面 i-1 长度的字符串组成的达标数量, 即 F(i-1)
 * 2. 若第二位是 0 则其后面一位,即第三位只能是 1, 故其可能性就由后面 i-2 长度的字符串组成的达标数量, 即 F(i-1)
 * 综上, 所有长度为 N 的字符串中达标字符串的数量 F(i) = F(i-1) + F(i-2)
 */
public class FindMatchStr {
    public static void main(String[] args) {

    }


}
